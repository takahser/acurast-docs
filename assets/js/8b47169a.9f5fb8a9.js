"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[744],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={title:"Substrate With EVM",slug:"/integrations/substrate-evm"},l="Substrate With EVM",s={unversionedId:"integrations/substrate-evm",id:"integrations/substrate-evm",title:"Substrate With EVM",description:"Acurast can be used on Substrate with an EVM integration. The output of the Acurast Jobs are pushed to a smart contract deployed in the EVM environment, that can then be used by other developers.",source:"@site/docs/integrations/substrate-evm.mdx",sourceDirName:"integrations",slug:"/integrations/substrate-evm",permalink:"/integrations/substrate-evm",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/integrations/substrate-evm.mdx",tags:[],version:"current",frontMatter:{title:"Substrate With EVM",slug:"/integrations/substrate-evm"},sidebar:"docs",previous:{title:"Substrate",permalink:"/integrations/substrate"},next:{title:"Substrate With WASM",permalink:"/integrations/substrate-wasm"}},i={},u=[{value:"Example integration with EVM parachain",id:"example-integration-with-evm-parachain",level:3},{value:"Solidity Contract Example",id:"solidity-contract-example",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"substrate-with-evm"},"Substrate With EVM"),(0,a.kt)("p",null,"Acurast can be used on Substrate with an EVM integration. The output of the Acurast Jobs are pushed to a smart contract deployed in the EVM environment, that can then be used by other developers."),(0,a.kt)("h3",{id:"example-integration-with-evm-parachain"},"Example integration with EVM parachain"),(0,a.kt)("p",null,"The following example shows a possible integration approach for an EVM parachain, using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/frontier"},"frontier"),"."),(0,a.kt)("p",null,"The example shows how to route the fulfillment's pyload to a smart contract by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"fulfill")," mehod on it and passing the payload bytes are argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(RuntimeDebug, Encode, Decode, MaxEncodedLen, TypeInfo, Clone, PartialEq)]\npub enum MethodSignatureHash {\n    Default,\n    Custom(BoundedVec<u8, ConstU32<4>>),\n}\n\nimpl MethodSignatureHash {\n    fn to_bytes(&self) -> [u8; 4] {\n        match self {\n            Self::Default => keccak_256!(b"fulfill(address,bytes)")[0..4].try_into().unwrap(),\n            Self::Custom(bytes) => bytes.to_vec().try_into().unwrap(),\n        }\n    }\n}\n\n#[derive(RuntimeDebug, Encode, Decode, MaxEncodedLen, TypeInfo, Clone, PartialEq)]\npub struct AcurastRegistrationExtra {\n    pub destination_contract: H160,\n    pub method_signature_hash: MethodSignatureHash,\n}\n\npub struct AcurastRouter;\nimpl pallet_acurast::FulfillmentRouter<Runtime> for AcurastRouter {\n    fn received_fulfillment(\n        origin: frame_system::pallet_prelude::OriginFor<Runtime>,\n        from: <Runtime as frame_system::Config>::AccountId,\n        fulfillment: pallet_acurast::Fulfillment,\n        registration: pallet_acurast::Registration<AcurastRegistrationExtra>,\n        requester: <<Runtime as frame_system::Config>::Lookup as StaticLookup>::Target,\n    ) -> DispatchResultWithPostInfo {\n        let from_bytes: [u8; 32] = from.try_into().unwrap();\n        let eth_source = H160::from_slice(&from_bytes[0..20]);\n        let requester_bytes: [u8; 32] = requester.try_into().unwrap();\n        let eth_requester = H160::from_slice(&requester_bytes[0..20]);\n        let gas_limit = 4294967;\n        EVM::call(\n            origin,\n            eth_source,\n            registration.extra.destination_contract,\n            create_eth_call(\n                registration.extra.method_signature_hash,\n                eth_requester,\n                fulfillment.payload,\n            ),\n            U256::zero(),\n            gas_limit,\n            DefaultBaseFeePerGas::get(),\n            None,\n            None,\n            vec![],\n        )\n    }\n}\n\nfn create_eth_call(method: MethodSignatureHash, requester: H160, payload: Vec<u8>) -> Vec<u8> {\n    let mut requester_bytes: [u8; 32] = [0; 32];\n    requester_bytes[(32 - requester.0.len())..].copy_from_slice(&requester.0);\n    let mut offset_bytes: [u8; 32] = [0; 32];\n    let payload_offset = requester_bytes.len().to_be_bytes();\n    offset_bytes[(32 - payload_offset.len())..].copy_from_slice(&payload_offset);\n    let mut payload_len_bytes: [u8; 32] = [0; 32];\n    let payload_len = payload.len().to_be_bytes();\n    payload_len_bytes[(32 - payload_len.len())..].copy_from_slice(&payload_len);\n    [\n        method.to_bytes().as_slice(),\n        requester_bytes.as_slice(),\n        offset_bytes.as_slice(),\n        payload_len_bytes.as_slice(),\n        &payload,\n    ]\n    .concat()\n}\n\nimpl pallet_acurast::Config for Runtime {\n    type Event = Event;\n    type RegistrationExtra = AcurastRegistrationExtra;\n    type FulfillmentRouter = AcurastRouter;\n}\n\n// Create the runtime by composing the FRAME pallets that were previously configured.\nconstruct_runtime!(\n    pub enum Runtime where\n        Block = Block,\n        NodeBlock = opaque::Block,\n        UncheckedExtrinsic = UncheckedExtrinsic,\n    {\n        // All your other pallets\n        ...\n        // EVM\n        Ethereum: pallet_ethereum::{Pallet, Call, Storage, Event, Config, Origin} = 50,\n        EVM: pallet_evm::{Pallet, Config, Call, Storage, Event<T>} = 51,\n        BaseFee: pallet_base_fee::{Pallet, Call, Storage, Config<T>, Event} = 52,\n\n        // Acurast\n        Acurast: pallet_acurast::{Pallet, Call, Storage, Event<T>} = 60,\n    }\n);\n')),(0,a.kt)("h3",{id:"solidity-contract-example"},"Solidity Contract Example"),(0,a.kt)("p",null,"The following snippet of code shows a very basic EVM smart contract capable of receiving the routed ",(0,a.kt)("inlineCode",{parentName:"p"},"fulfill")," call from the ",(0,a.kt)("inlineCode",{parentName:"p"},"FulfillmentRouter")," implemented above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity ^0.8.0;\ncontract SimpleFulfill {\n    address _address;\n    bytes _payload;\n    function fulfill(address addr, bytes memory payload) public {\n        _address = addr;\n        _payload = payload;\n    }\n    function getAddress() public view returns(address) {\n        return _address;\n    }\n    function getPayload() public view returns(bytes memory) {\n        return _payload;\n    }\n}\n")))}p.isMDXComponent=!0}}]);