"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[507],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7605:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"Substrate With WASM",slug:"/integrations/substrate-wasm"},s="Substrate With WASM",i={unversionedId:"integrations/substrate-wasm",id:"integrations/substrate-wasm",title:"Substrate With WASM",description:"Acurast can be used on Substrate with an WASM integration. The output of the Acurast Jobs are pushed to a smart contract deployed in the WASN environment, that can then be used by other developers.",source:"@site/docs/integrations/substrate-wasm.mdx",sourceDirName:"integrations",slug:"/integrations/substrate-wasm",permalink:"/integrations/substrate-wasm",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/integrations/substrate-wasm.mdx",tags:[],version:"current",frontMatter:{title:"Substrate With WASM",slug:"/integrations/substrate-wasm"},sidebar:"docs",previous:{title:"Substrate With EVM",permalink:"/integrations/substrate-evm"},next:{title:"Tezos",permalink:"/integrations/tezos"}},c={},l=[{value:"Example integration with WASM smart contract parachain",id:"example-integration-with-wasm-smart-contract-parachain",level:3},{value:"ink! Contract Example",id:"ink-contract-example",level:3}],u={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"substrate-with-wasm"},"Substrate With WASM"),(0,a.kt)("p",null,"Acurast can be used on Substrate with an WASM integration. The output of the Acurast Jobs are pushed to a smart contract deployed in the WASN environment, that can then be used by other developers."),(0,a.kt)("h3",{id:"example-integration-with-wasm-smart-contract-parachain"},"Example integration with WASM smart contract parachain"),(0,a.kt)("p",null,"The following example shows a possible integration approach for a WASM smart contract parachain (using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/tree/master/frame/contracts"},"pallet-contracts"),").\nSimilarly to the EVM integration, the example shows how to route the fulfillment's pyload to a smart contract by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"fulfill")," mehod on it and passing the payload bytes are argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(RuntimeDebug, Encode, Decode, MaxEncodedLen, TypeInfo, Clone, PartialEq, Eq)]\npub enum ContractMethodSelector {\n    Default,\n    Custom([u8; 4]),\n}\nimpl ContractMethodSelector {\n    fn into_fixed_bytes(self) -> [u8; 4] {\n        match self {\n            Self::Default => BlakeTwo256::hash(b"fulfill").as_bytes()[0..4].try_into().unwrap(),\n            Self::Custom(bytes) => bytes,\n        }\n    }\n}\n#[derive(RuntimeDebug, Encode, Decode, MaxEncodedLen, TypeInfo, Clone, PartialEq, Eq)]\npub struct RegistrationExtra {\n    pub contract_address: AccountId,\n    pub selector: ContractMethodSelector,\n}\nparameter_types! {\n    pub const MaxAllowedSources: u16 = 100;\n    pub AllowedRevocationListUpdate: Vec<AccountId> = vec![];\n}\nimpl pallet_acurast::Config for Runtime {\n    type Event = Event;\n    type RegistrationExtra = RegistrationExtra;\n    type FulfillmentRouter = AcurastRouter;\n    type MaxAllowedSources = MaxAllowedSources;\n    type AllowedRevocationListUpdate = AllowedRevocationListUpdate;\n}\npub struct AcurastRouter;\nimpl pallet_acurast::FulfillmentRouter<Runtime> for AcurastRouter {\n    fn received_fulfillment(\n        origin: frame_system::pallet_prelude::OriginFor<Runtime>,\n        from: <Runtime as frame_system::Config>::AccountId,\n        fulfillment: pallet_acurast::Fulfillment,\n        registration: pallet_acurast::JobRegistration<AccountId, RegistrationExtra>,\n        requester: <<Runtime as frame_system::Config>::Lookup as StaticLookup>::Target,\n    ) -> DispatchResultWithPostInfo {\n        Contracts::call(\n            origin,\n            registration.extra.contract_address.into(),\n            0,\n            18_750_000_000,\n            None,\n            [\n                registration.extra.selector.into_fixed_bytes().to_vec(),\n                from.encode(),\n                requester.encode(),\n                fulfillment.payload.encode(),\n            ]\n            .concat(),\n        )\n    }\n}\nconstruct_runtime!(\n    pub enum Runtime where\n        Block = Block,\n        NodeBlock = opaque::Block,\n        UncheckedExtrinsic = UncheckedExtrinsic,\n    {\n        // All your other pallets\n        ...\n        // Contracts\n        Contracts: pallet_contracts,\n        // Acurast\n        Acurast: pallet_acurast,\n    }\n);\n')),(0,a.kt)("h3",{id:"ink-contract-example"},"ink! Contract Example"),(0,a.kt)("p",null,"The following snippet of code shows a very basic WASM smart contract implemented using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink"},"ink!")," and capable of receiving the routed ",(0,a.kt)("inlineCode",{parentName:"p"},"fulfill")," call from the ",(0,a.kt)("inlineCode",{parentName:"p"},"FulfillmentRouter")," implemented above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\nuse ink_lang as ink;\n#[ink::contract]\nmod receiver {\n    use ink_prelude::vec::Vec;\n    /// Defines the storage of your contract.\n    /// Add new fields to the below struct in order\n    /// to add new static storage fields to your contract.\n    #[ink(storage)]\n    pub struct Receiver {\n        source: Option<AccountId>,\n        target: Option<AccountId>,\n        payload: Option<Vec<u8>>,\n    }\n    impl Receiver {\n        /// Constructor that initializes `source`, `target` and `payload` to `None`.\n        ///\n        /// Constructors can delegate to other constructors.\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self {\n                source: None,\n                target: None,\n                payload: None,\n            }\n        }\n        /// Simply stores the `source`, `target` and `payload` values.\n        #[ink(message)]\n        pub fn fulfill(&mut self, source: AccountId, target: AccountId, payload: Vec<u8>) {\n            self.source = Some(source);\n            self.target = Some(target);\n            self.payload = Some(payload);\n        }\n        /// Simply returns the current value of our `source`, `target` and `payload`.\n        #[ink(message)]\n        pub fn get(&self) -> (Option<AccountId>, Option<AccountId>, Option<Vec<u8>>) {\n            (\n                self.source.clone(),\n                self.target.clone(),\n                self.payload.clone(),\n            )\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);