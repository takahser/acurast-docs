"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8565:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={title:"Substrate",slug:"/integrations/substrate"},l="Substrate Integration",o={unversionedId:"integrations/substrate",id:"integrations/substrate",title:"Substrate",description:"GitHub Repository",source:"@site/docs/integrations/substrate.mdx",sourceDirName:"integrations",slug:"/integrations/substrate",permalink:"/integrations/substrate",draft:!1,editUrl:"https://github.com/acurast/acurast-docs/docs/integrations/substrate.mdx",tags:[],version:"current",frontMatter:{title:"Substrate",slug:"/integrations/substrate"},sidebar:"docs",previous:{title:"Introduction",permalink:"/integrations/introduction"},next:{title:"Substrate With EVM",permalink:"/integrations/substrate-evm"}},s={},u=[{value:"Extrinsics",id:"extrinsics",level:2},{value:"register",id:"register",level:4},{value:"deregister",id:"deregister",level:4},{value:"updateAllowedSources",id:"updateallowedsources",level:4},{value:"fulfill",id:"fulfill",level:4},{value:"Setup",id:"setup",level:2},{value:"Parachain Integration",id:"parachain-integration",level:2},{value:"P256 signatures",id:"p256-signatures",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"substrate-integration"},"Substrate Integration"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Acurast/acurast-core"},"GitHub Repository")),(0,a.kt)("p",null,"The Acurast Pallet allows a Substrate based chain to integrate the Acurast functionality to be able to securly receive real world data posted by the Acurast Acurast Transmitters."),(0,a.kt)("h2",{id:"extrinsics"},"Extrinsics"),(0,a.kt)("p",null,"The Pallet exposes a number of extrinsic."),(0,a.kt)("h4",{id:"register"},"register"),(0,a.kt)("p",null,"Allows the registration of a job. A registration consists of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An ipfs URL to a ",(0,a.kt)("inlineCode",{parentName:"li"},"script")," (written in Javascript).",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The script will be run in the Acurast Trusted Virtual Machine that uses a Trusted Execution Environment (TEE) on the Acurast Data Transmitter."))),(0,a.kt)("li",{parentName:"ul"},"An optional ",(0,a.kt)("inlineCode",{parentName:"li"},"allowedSources")," list of allowed sources.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A list of ",(0,a.kt)("inlineCode",{parentName:"li"},"AccountId"),"s that are allowed to ",(0,a.kt)("inlineCode",{parentName:"li"},"fulfill")," the job. If no list is provided, all sources are accepted."))),(0,a.kt)("li",{parentName:"ul"},"An ",(0,a.kt)("inlineCode",{parentName:"li"},"allowOnlyVerifiedSources")," boolean indicating if only verified source can fulfill the job.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A verified source is one that has provided a valid key attestation."))),(0,a.kt)("li",{parentName:"ul"},"An ",(0,a.kt)("inlineCode",{parentName:"li"},"extra")," structure that can be used to provide custom parameters.")),(0,a.kt)("p",null,"Registrations are saved per ",(0,a.kt)("inlineCode",{parentName:"p"},"AccountId")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"script"),", meaning that ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," is called twice from the same ",(0,a.kt)("inlineCode",{parentName:"p"},"AccountId")," with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"script")," value, the previous registration is overwritten."),(0,a.kt)("h4",{id:"deregister"},"deregister"),(0,a.kt)("p",null,"Allows the de-registration of a job."),(0,a.kt)("h4",{id:"updateallowedsources"},"updateAllowedSources"),(0,a.kt)("p",null,"Allows to update the list of allowed sources for a previously registered job."),(0,a.kt)("h4",{id:"fulfill"},"fulfill"),(0,a.kt)("p",null,"Allows to post the fulfillment of a registered job. The fulfillment structure consists of:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ipfs url of the ",(0,a.kt)("inlineCode",{parentName:"li"},"script")," executed."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"payload")," bytes representing the output of the ",(0,a.kt)("inlineCode",{parentName:"li"},"script"),".")),(0,a.kt)("p",null,"In addition to the ",(0,a.kt)("inlineCode",{parentName:"p"},"fulfillment")," structure, ",(0,a.kt)("inlineCode",{parentName:"p"},"fulfill")," expects the ",(0,a.kt)("inlineCode",{parentName:"p"},"AccountId")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"requester")," of the job."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Add the following dependency to your Cargo manifest:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\npallet-acurast = { git = "https://github.com/Acurast/acurast-core.git" }\n')),(0,a.kt)("h2",{id:"parachain-integration"},"Parachain Integration"),(0,a.kt)("p",null,"Implement ",(0,a.kt)("inlineCode",{parentName:"p"},"pallet_acurast::Config")," for your ",(0,a.kt)("inlineCode",{parentName:"p"},"Runtime")," and add the Pallet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(RuntimeDebug, Encode, Decode, MaxEncodedLen, TypeInfo, Clone, PartialEq)]\npub struct AcurastRegistrationExtra {\n    /// my extra registration parameters\n}\n\n/// My fulfillment router\npub struct AcurastRouter;\nimpl pallet_acurast::FulfillmentRouter<Runtime> for AcurastRouter {\n    fn received_fulfillment(\n        origin: frame_system::pallet_prelude::OriginFor<Runtime>,\n        from: <Runtime as frame_system::Config>::AccountId,\n        fulfillment: pallet_acurast::Fulfillment,\n        registration: pallet_acurast::Registration<AcurastRegistrationExtra>,\n        requester: <<Runtime as frame_system::Config>::Lookup as StaticLookup>::Target,\n    ) -> DispatchResultWithPostInfo {\n        /// route the fulfillment to its final destination\n    }\n}\n\nimpl pallet_acurast::Config for Runtime {\n    type Event = Event;\n    type RegistrationExtra = AcurastRegistrationExtra;\n    type FulfillmentRouter = AcurastRouter;\n}\n\n// Create the runtime by composing the FRAME pallets that were previously configured.\nconstruct_runtime!(\n    pub enum Runtime where\n        Block = Block,\n        NodeBlock = opaque::Block,\n        UncheckedExtrinsic = UncheckedExtrinsic,\n    {\n        // All your other pallets\n        ...\n        // Acurast\n        Acurast: pallet_acurast::{Pallet, Call, Storage, Event<T>} = 50,\n    }\n);\n")),(0,a.kt)("h2",{id:"p256-signatures"},"P256 signatures"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Acurast/acurast-core/tree/main/p256-crypto"},"GitHub Repository")),(0,a.kt)("p",null,"Acurast Acurast Transmitters will sign extrinsics (the ",(0,a.kt)("inlineCode",{parentName:"p"},"fulfill")," call) using a P256 (a.k.a secp256r1) private key."),(0,a.kt)("p",null,"By default, Substrate does not support the P256 curve. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"acurast-p256-crypto")," crate to add support for P256 signature verification."),(0,a.kt)("p",null,"To do so, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"acurast_p256_crypto::MultiSignature")," as your parachain ",(0,a.kt)("inlineCode",{parentName:"p"},"Signature")," type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use acurast_p256_crypto::MultiSignature;\n\npub type Signature = MultiSignature;\npub type AccountId = <<Signature as Verify>::Signer as IdentifyAccount>::AccountId;\n...\n\nimpl frame_system::Config for Runtime {\n    type AccountId = AccountId;\n    ...\n}\n")))}c.isMDXComponent=!0}}]);